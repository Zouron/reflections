How did viewing a diff between two versions of a file
help you see the bug that was introduced>
-I was able to focus only on a few lines
-My attention was on what was changed
-I had a easier time locating the differences
-the format was easy to understand

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
-I can see all the changes made at each step.
-I can see what other have tried
-I can learn from others mistakes

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
-Pros:
	-Can choose what changes to make
	-Can give each change a description
	-Easier to review as each update is a complete change

-Cons:
	-Might forget to make commits
	-make wrong decisions on when to make commits
	-Description might not be a good one.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
While coding, files may be dependant on each other and that is why a snapshot of each file needs to be stored. In other forms of version control, individual files don't rely on each other and therefore changes in one don't affect anything in other files.

How can you use the commands git log and git diff to view the history of files?
-Type git log
-Type git diff ID_1 ID_2

Now that you have your workspace set up, what do you want to try using Git for?
-Create project and practice commiting
-Upload all my previous uni assignments